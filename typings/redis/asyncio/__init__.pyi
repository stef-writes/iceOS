from typing import Any, Dict, Optional

class Redis:
    def __init__(
        self,
        host: str = ...,
        *,
        port: int = ...,
        db: int = ...,
        password: Optional[str] = ...,
        decode_responses: bool = ...,
        **kwargs: Any,
    ) -> None: ...

    # Basic commands
    async def ping(self) -> str: ...
    async def hset(self, name: str, mapping: Dict[str, Any]) -> int: ...
    async def hget(self, name: str, key: str) -> Optional[str]: ...
    async def hgetall(self, name: str) -> Dict[str, str]: ...
    async def hdel(self, name: str, *keys: str) -> int: ...
    async def exists(self, name: str) -> bool: ...

    # Streams
    async def xadd(
        self, name: str, fields: Dict[str, Any], *, id: str = ...
    ) -> str: ...
    async def xread(
        self, streams: Dict[str, str], *, count: int = ..., block: Optional[int] = ...
    ) -> Any: ...

# Factory

def from_url(url: str, **kwargs: Any) -> Redis: ...
