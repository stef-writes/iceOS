from typing import (
    Any,
    Awaitable,
    Callable,
    Dict,
    List,
    Optional,
    ParamSpec,
    Protocol,
    TypeVar,
)

_P = ParamSpec("_P")
_R = TypeVar("_R")

class APIRouter:
    def __init__(
        self,
        prefix: str = ...,
        tags: List[str] = ...,
        dependencies: List[Any] = ...,
        **kwargs: Any,
    ) -> None: ...
    def get(
        self, path: str, *args: Any, **kw: Any
    ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...
    def post(
        self, path: str, *args: Any, **kw: Any
    ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...
    def put(
        self, path: str, *args: Any, **kw: Any
    ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...
    def delete(
        self, path: str, *args: Any, **kw: Any
    ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...
    def patch(
        self, path: str, *args: Any, **kw: Any
    ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...
    def websocket(
        self, path: str, *args: Any, **kw: Any
    ) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...

class WebSocket:
    async def accept(self, subprotocol: Optional[str] = ...) -> None: ...
    async def receive_text(self) -> str: ...
    async def send_text(self, data: str) -> None: ...
    async def send_json(self, data: Any) -> None: ...
    async def close(self, code: int = ...) -> None: ...
    headers: Dict[str, str] = ...
    application_state: Any = ...
    app: Any = ...

class Request:
    url: Any = ...
    method: str = ...
    headers: Dict[str, str] = ...
    path_params: Dict[str, Any] = ...
    app: Any = ...
    async def json(self) -> Any: ...

class Response:
    def __init__(
        self,
        content: Any = ...,
        status_code: int = ...,
        media_type: str = ...,
        headers: Dict[str, str] = ...,
        **kwargs: Any,
    ) -> None: ...
    headers: Dict[str, str] = ...

class FastAPI:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def get(
        self, path: str, *args: Any, **kwargs: Any
    ) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
    def middleware(
        self, type_: str
    ) -> Callable[
        [Callable[..., Awaitable[Response]]], Callable[..., Awaitable[Response]]
    ]: ...
    def websocket(
        self, path: str, *args: Any, **kwargs: Any
    ) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
    state: Any = ...
    version: str = ...
    def exception_handler(
        self, exc_class: type
    ) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
    def add_middleware(
        self, middleware_class: type, *args: Any, **kwargs: Any
    ) -> None: ...
    def include_router(self, router: APIRouter, *args: Any, **kwargs: Any) -> None: ...

# Global router for simple usage
router = APIRouter()

def Depends(arg: Any) -> Any: ...
def Body(*args: Any, **kwargs: Any) -> Any: ...
def Header(*args: Any, **kwargs: Any) -> Any: ...

class HTTPException(Exception):
    def __init__(
        self,
        status_code: int,
        detail: Any = ...,
        headers: Optional[Dict[str, Any]] = ...,
    ) -> None: ...
    status_code: int
    detail: Any

# ---------------------------------------------------------------------------
# status submodule (constants only)
# ---------------------------------------------------------------------------

class _StatusModule(Protocol):
    HTTP_200_OK: int
    HTTP_201_CREATED: int
    HTTP_202_ACCEPTED: int
    HTTP_204_NO_CONTENT: int
    HTTP_400_BAD_REQUEST: int
    HTTP_401_UNAUTHORIZED: int
    HTTP_403_FORBIDDEN: int
    HTTP_404_NOT_FOUND: int
    HTTP_500_INTERNAL_SERVER_ERROR: int
    WS_1008_POLICY_VIOLATION: int

status: _StatusModule

class WebSocketDisconnect(Exception):
    def __init__(self, code: int = ...) -> None: ...
    code: int

# HTTP Status codes
class HTTP_200_OK: ...
class HTTP_201_CREATED: ...
class HTTP_202_ACCEPTED: ...
class HTTP_204_NO_CONTENT: ...
class HTTP_400_BAD_REQUEST: ...
class HTTP_401_UNAUTHORIZED: ...
class HTTP_403_FORBIDDEN: ...
class HTTP_404_NOT_FOUND: ...
class HTTP_500_INTERNAL_SERVER_ERROR: ...

# WebSocket status codes
class WS_1008_POLICY_VIOLATION: ...

class WebSocketState:
    CONNECTED: str
    DISCONNECTED: str

class _WebsocketsModule(Protocol):
    WebSocketState: type

websockets: _WebsocketsModule
