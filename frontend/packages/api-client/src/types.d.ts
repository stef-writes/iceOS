/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint returning API info.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mcp Jsonrpc Handler
         * @description Main MCP JSON-RPC 2.0 handler with comprehensive error handling.
         */
        post: operations["mcp_jsonrpc_handler_api_mcp__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/agents/compose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compose Agent
         * @description Create a simple agent definition and register via component pipeline.
         *
         *     Not BYOK: any `api_key` field in llm_config is ignored.
         */
        post: operations["compose_agent_api_mcp_agents_compose_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Blueprint
         * @description Register (or upsert) a *Blueprint*.
         */
        post: operations["create_blueprint_api_mcp_blueprints_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/design-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Design Session
         * @description Create a new design session for incremental blueprint building.
         *
         *     This supports the Frosty/Canvas workflow where:
         *     1. User starts a design session
         *     2. Validates and registers components as needed
         *     3. Incrementally builds blueprint with PartialBlueprint
         *     4. Gets real-time validation and suggestions
         *     5. Finalizes when ready
         */
        post: operations["create_design_session_api_mcp_blueprints_design_session_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/design-session/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Design Session
         * @description Get current state of a design session.
         */
        get: operations["get_design_session_api_mcp_blueprints_design_session__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/design-session/{session_id}/register-component": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register Session Component
         * @description Track that a component was registered in this design session.
         */
        post: operations["register_session_component_api_mcp_blueprints_design_session__session_id__register_component_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/partial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Partial Blueprint
         * @description Create a new partial blueprint for incremental construction.
         */
        post: operations["create_partial_blueprint_api_mcp_blueprints_partial_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/partial/{blueprint_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Partial Blueprint
         * @description Return stored PartialBlueprint JSON and expose current lock in header.
         */
        get: operations["get_partial_blueprint_api_mcp_blueprints_partial__blueprint_id__get"];
        /**
         * Update Partial Blueprint
         * @description Update a partial blueprint - add/remove/modify nodes.
         */
        put: operations["update_partial_blueprint_api_mcp_blueprints_partial__blueprint_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/partial/{blueprint_id}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalize Partial Blueprint
         * @description Convert partial blueprint to executable blueprint.
         */
        post: operations["finalize_partial_blueprint_api_mcp_blueprints_partial__blueprint_id__finalize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/partial/{blueprint_id}/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suggest Next Nodes
         * @description Return deterministic suggestions for next nodes based on partial blueprint.
         *
         *     - No side effects by default.
         *     - If body.commit==True, requires X-Version-Lock and persists a summary to partial.next_suggestions.
         */
        post: operations["suggest_next_nodes_api_mcp_blueprints_partial__blueprint_id__suggest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/{blueprint_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Blueprint
         * @description Retrieve a registered blueprint by ID.
         */
        get: operations["get_blueprint_api_mcp_blueprints__blueprint_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/blueprints/{blueprint_id}/visualization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Blueprint Visualization
         * @description Get visualization data for a blueprint.
         */
        get: operations["get_blueprint_visualization_api_mcp_blueprints__blueprint_id__visualization_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/chat/{agent_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat Turn
         * @description Single chat turn with simple session memory stored in Redis.
         *
         *     - Resolves data-first AgentDefinition if present.
         *     - Builds an LLM node on-the-fly using the agent's llm_config and system_prompt.
         *     - Persists message history per (agent_name, session_id) in Redis.
         */
        post: operations["chat_turn_api_mcp_chat__agent_name__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Components
         * @description List stored components from the Redis index plus current registry view.
         */
        get: operations["list_all_components_api_mcp_components_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/components/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register Component
         * @description Validate then persist a component definition and register it (via service).
         */
        post: operations["register_component_api_mcp_components_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/components/scaffold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scaffold Component
         * @description Generate starter code for a new component.
         *
         *     - For tools: provide a minimal ToolBase subclass and factory template.
         *     - For agents: provide an agent factory using `agent_factory` decorator.
         *     - For workflows: currently out-of-scope; recommend building via blueprint.
         */
        post: operations["scaffold_component_api_mcp_components_scaffold_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/components/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Component Definition
         * @description Validate a component definition and optionally auto-register if valid.
         *
         *     This enables the Frosty/Canvas workflow where components are validated
         *     BEFORE registration, ensuring only valid components enter the registry.
         *
         *     Flow:
         *     1. Submit component definition (tool/agent/workflow)
         *     2. Validate structure, dependencies, conflicts
         *     3. If valid and auto_register=true, register the component
         *     4. Return validation results with suggestions
         */
        post: operations["validate_component_definition_api_mcp_components_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/components/{component_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Components By Type
         * @description List all registered components of a given type.
         */
        get: operations["list_components_by_type_api_mcp_components__component_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/components/{component_type}/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Component
         * @description Fetch a stored component definition and expose current version lock.
         */
        get: operations["get_component_api_mcp_components__component_type___name__get"];
        /**
         * Update Component
         * @description Update a stored component; requires X-Version-Lock optimistic concurrency.
         */
        put: operations["update_component_api_mcp_components__component_type___name__put"];
        post?: never;
        /**
         * Delete Component
         * @description Delete a stored component definition and remove it from the index.
         */
        delete: operations["delete_component_api_mcp_components__component_type___name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Run
         * @description Execute a blueprint by *id* or inline definition and return *run_id*.
         */
        post: operations["start_run_api_mcp_runs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Result
         * @description Return the final *RunResult* if available, else 202.
         */
        get: operations["get_result_api_mcp_runs__run_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/runs/{run_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Event Stream
         * @description Stream events for *run_id* via Server-Sent Events.
         */
        get: operations["event_stream_api_mcp_runs__run_id__events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/workflows/{workflow_id}/graph/analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Graph Analysis
         * @description Get comprehensive graph analysis including paths, bottlenecks, and optimization suggestions.
         */
        get: operations["get_workflow_graph_analysis_api_mcp_workflows__workflow_id__graph_analysis_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/workflows/{workflow_id}/graph/layout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Layout Hints
         * @description Get intelligent layout hints for canvas visualization.
         */
        get: operations["get_workflow_layout_hints_api_mcp_workflows__workflow_id__graph_layout_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/workflows/{workflow_id}/graph/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Graph Metrics
         * @description Get comprehensive graph analysis metrics for a workflow.
         */
        get: operations["get_workflow_graph_metrics_api_mcp_workflows__workflow_id__graph_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/workflows/{workflow_id}/graph/patterns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Find Workflow Patterns
         * @description Find similar patterns in the workflow for refactoring opportunities.
         */
        post: operations["find_workflow_patterns_api_mcp_workflows__workflow_id__graph_patterns_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/workflows/{workflow_id}/nodes/{node_id}/impact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Analyze Node Impact
         * @description Analyze the impact of changes to a specific node.
         */
        get: operations["analyze_node_impact_api_mcp_workflows__workflow_id__nodes__node_id__impact_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mcp/workflows/{workflow_id}/nodes/{node_id}/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Node Suggestions
         * @description Get AI-powered suggestions for next nodes after the specified node.
         */
        get: operations["get_node_suggestions_api_mcp_workflows__workflow_id__nodes__node_id__suggestions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agents
         * @description Return all registered agent names.
         */
        get: operations["list_agents_api_v1_agents_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blueprints/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Blueprint
         * @description Create a blueprint using optimistic concurrency.
         *
         *     Args:
         *         request (Request): FastAPI request object (used for headers and app state).
         *         blueprint (Blueprint): Fully-typed Blueprint payload.
         *
         *     Returns:
         *         BlueprintCreateResponse: Identifier and version lock of the stored blueprint.
         *
         *     Example:
         *         POST /api/v1/blueprints/ with header X-Version-Lock: __new__ and a Blueprint body.
         */
        post: operations["create_blueprint_api_v1_blueprints__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blueprints/{blueprint_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Blueprint
         * @description Return a stored Blueprint by *id* with optimistic version-lock header.
         */
        get: operations["get_blueprint_api_v1_blueprints__blueprint_id__get"];
        /**
         * Replace Blueprint
         * @description Replace an existing blueprint in one shot (optimistic concurrency).
         */
        put: operations["replace_blueprint_api_v1_blueprints__blueprint_id__put"];
        post?: never;
        /**
         * Delete Blueprint
         * @description Delete a blueprint after optimistic lock validation.
         */
        delete: operations["delete_blueprint_api_v1_blueprints__blueprint_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Blueprint
         * @description Incrementally update a stored blueprint.
         *
         *     Payload schema (minimal):
         *         {
         *           "nodes": [ { ...NodeSpec... | {"id": "node_id", "type": "__delete__"} ]
         *         }
         */
        patch: operations["patch_blueprint_api_v1_blueprints__blueprint_id__patch"];
        trace?: never;
    };
    "/api/v1/blueprints/{blueprint_id}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone Blueprint
         * @description Create a deep copy of an existing blueprint and return the new id.
         */
        post: operations["clone_blueprint_api_v1_blueprints__blueprint_id__clone_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builder/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply */
        post: operations["apply_api_v1_builder_apply_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builder/drafts/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Draft
         * @description Fetch a draft for the current identity.
         *
         *     Returns current version and data. Raises 404 if not found.
         */
        get: operations["get_draft_api_v1_builder_drafts__key__get"];
        /**
         * Put Draft
         * @description Create or update a draft for the current identity.
         *
         *     Uses optimistic concurrency via versioning:
         *     - If request has "If-Match: <version>", update only if current version matches.
         *     - Otherwise create-or-replace and bump version.
         */
        put: operations["put_draft_api_v1_builder_drafts__key__put"];
        post?: never;
        /**
         * Delete Draft
         * @description Delete a draft for the current identity (idempotent).
         */
        delete: operations["delete_draft_api_v1_builder_drafts__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builder/preview/tool": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview Tool
         * @description Run generated code in a strict sandbox without registering it.
         *
         *     Returns structured logs/results; never persists or registers components.
         */
        post: operations["preview_tool_api_v1_builder_preview_tool_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builder/propose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Propose */
        post: operations["propose_api_v1_builder_propose_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builder/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Session */
        get: operations["get_session_api_v1_builder_sessions__session_id__get"];
        /** Put Session */
        put: operations["put_session_api_v1_builder_sessions__session_id__put"];
        post?: never;
        /** Delete Session */
        delete: operations["delete_session_api_v1_builder_sessions__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/builder/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Suggest */
        post: operations["suggest_api_v1_builder_suggest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Chains
         * @description Return all registered chain names.
         */
        get: operations["list_chains_api_v1_chains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/diag/llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Diag Llm */
        get: operations["diag_llm_api_v1_diag_llm_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/executions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Executions
         * @description List known executions from Redis (authoritative) with basic fields.
         */
        get: operations["list_executions_api_v1_executions__get"];
        put?: never;
        /**
         * Start Execution
         * @description Kick off a workflow execution.
         *
         *     Expected JSON body::
         *         {
         *             "blueprint_id": "...",            # required
         *             "inputs": {...}                     # optional initial inputs
         *         }
         */
        post: operations["start_execution_api_v1_executions__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/executions/{execution_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Execution Status */
        get: operations["get_execution_status_api_v1_executions__execution_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/executions/{execution_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Execution
         * @description Best-effort cancel of a running execution.
         *
         *     MVP semantics: mark status as failed with reason="canceled" and persist.
         */
        post: operations["cancel_execution_api_v1_executions__execution_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/executors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Executors
         * @description Return all registered executors keyed by node_type.
         */
        get: operations["list_executors_api_v1_executors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/library/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Assets */
        get: operations["list_assets_api_v1_library_assets_get"];
        put?: never;
        /**
         * Add Asset
         * @description Create or update a user library asset using semantic memory storage.
         *
         *     - Stores under scope 'library' by default
         *     - Key format: asset:{user_id}:{label}
         */
        post: operations["add_asset_api_v1_library_assets_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/library/assets/index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Library
         * @description Return a unified listing of components and blueprints.
         *
         *     Filters:
         *     - q: substring match on name/id
         *     - kind: filter to 'component' or 'blueprint'
         */
        get: operations["list_library_api_v1_library_assets_index_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/library/assets/{label}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Asset */
        get: operations["get_asset_api_v1_library_assets__label__get"];
        put?: never;
        post?: never;
        /** Delete Asset */
        delete: operations["delete_asset_api_v1_library_assets__label__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/mcp/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mcp Jsonrpc Handler
         * @description Main MCP JSON-RPC 2.0 handler with comprehensive error handling.
         */
        post: operations["mcp_jsonrpc_handler_api_v1_mcp__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Meta Components
         * @description Return component inventories for dashboards (names only).
         */
        get: operations["meta_components_api_v1_meta_components_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Node Catalog
         * @description Return catalog of nodes with schemas for tools.
         *
         *     Notes
         *     -----
         *     - Tool schemas are discovered from the registered tool factories.
         *     - Other node categories are listed by name at this tier (schemas are
         *       typically resolved at compile-time or via specialized endpoints).
         */
        get: operations["list_node_catalog_api_v1_meta_nodes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/nodes/tool/{tool_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tool Details
         * @description Return detailed info for a tool, including discovered schemas.
         */
        get: operations["get_tool_details_api_v1_meta_nodes_tool__tool_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/nodes/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Node Types
         * @description Return supported node type strings (canonical).
         */
        get: operations["list_node_types_api_v1_meta_nodes_types_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/nodes/{node_type}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Node Schema
         * @description Return Pydantic JSON Schema for the given node type.
         */
        get: operations["get_node_schema_api_v1_meta_nodes__node_type__schema_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/registry/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Registry Health
         * @description Return counts and missing executor information.
         *
         *     This endpoint helps ensure the orchestrator registry is fully populated and
         *     matches expectations after initialization and policy filtering.
         */
        get: operations["registry_health_api_v1_meta_registry_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Storage Health
         * @description Return storage mode and basic readiness.
         *
         *     This is a forward-compatible health endpoint. Today it reports the
         *     effective storage backend based on environment configuration. Once a
         *     SQL-backed repository is introduced, this endpoint will also report
         *     current migration head and connection status.
         */
        get: operations["storage_health_api_v1_meta_storage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/meta/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Version Info
         * @description Return app version and build metadata.
         */
        get: operations["version_info_api_v1_meta_version_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tokens/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Tokens */
        get: operations["list_tokens_api_v1_tokens__get"];
        put?: never;
        /**
         * Issue Token
         * @description Issue a new bearer token and persist its hash.
         *
         *     The raw token is returned once; only the hash is stored server-side.
         */
        post: operations["issue_token_api_v1_tokens__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tokens/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke Token */
        post: operations["revoke_token_api_v1_tokens_revoke_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tokens/{token_hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Token */
        delete: operations["delete_token_api_v1_tokens__token_hash__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tools
         * @description Return all registered tool names.
         */
        get: operations["list_tools_api_v1_tools_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Files
         * @description Upload one or more text files, ingest into semantic memory.
         *
         *     Parameters
         *     ----------
         *     files : List[UploadFile]
         *             One or more files to ingest as plain text.
         *     scope : str
         *             Semantic memory scope key used for retrieval.
         *     chunk_size : int
         *             Chunk size in characters for splitting.
         *     overlap : int
         *             Overlap size between chunks.
         *     metadata_json : str | None
         *             Optional JSON string of metadata to attach to each chunk (merged with filename).
         */
        post: operations["upload_files_api_v1_uploads_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workflows
         * @description Return all registered workflow names.
         */
        get: operations["list_workflows_api_v1_workflows_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check Legacy
         * @description Health probe – alias for /livez (kept for compatibility).
         */
        get: operations["health_check_legacy_healthz_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/livez": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Live Check
         * @description Liveness probe – returns 200 when process is running.
         */
        get: operations["live_check_livez_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/readyz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ready Check
         * @description Readiness probe – returns 200 only after full startup.
         */
        get: operations["ready_check_readyz_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AgentComposeRequest
         * @description Compose an agent from prompt, tools, and LLM config (without api_key).
         */
        AgentComposeRequest: {
            /** Llm Config */
            llm_config?: Record<string, never> | null;
            /** Name */
            name: string;
            /** System Prompt */
            system_prompt?: string | null;
            /** Tools */
            tools?: string[];
        };
        /** ApplyRequest */
        ApplyRequest: {
            blueprint: components["schemas"]["PartialBlueprint"];
            /** Patches */
            patches: components["schemas"]["NodePatch"][];
        };
        /** ApplyResponse */
        ApplyResponse: {
            blueprint: components["schemas"]["PartialBlueprint"];
        };
        /**
         * Blueprint
         * @description A design-time workflow blueprint transferable over the wire.
         */
        Blueprint: {
            /** Blueprint Id */
            blueprint_id?: string;
            /**
             * Metadata
             * @description Arbitrary metadata for documentation
             */
            metadata?: Record<string, never>;
            /**
             * Nodes
             * @description Nodes comprising the workflow
             */
            nodes: components["schemas"]["NodeSpec"][];
            /**
             * Schema Version
             * @description Semver blueprint schema version
             * @default 1.2.0
             * @example 1.2.0
             */
            schema_version: string;
        };
        /**
         * BlueprintAck
         * @description Acknowledgement for blueprint registration.
         */
        BlueprintAck: {
            /** Blueprint Id */
            blueprint_id: string;
            /**
             * Status
             * @default accepted
             */
            status: string;
        };
        /** BlueprintCloneResponse */
        BlueprintCloneResponse: {
            /** Id */
            id: string;
            /** Version Lock */
            version_lock: string;
        };
        /**
         * BlueprintCreateResponse
         * @description Response for blueprint creation.
         *
         *     Args:
         *         id (str): Assigned blueprint identifier.
         *         version_lock (str): Version lock for optimistic concurrency.
         *
         *     Returns:
         *         BlueprintCreateResponse: Response model containing identifiers.
         */
        BlueprintCreateResponse: {
            /** Id */
            id: string;
            /** Version Lock */
            version_lock: string;
        };
        /** BlueprintGetResponse */
        BlueprintGetResponse: {
            /** Data */
            data: Record<string, never>;
            /** Version Lock */
            version_lock: string;
        };
        /** BlueprintPatchResponse */
        BlueprintPatchResponse: {
            /** Id */
            id: string;
            /** Node Count */
            node_count: number;
        };
        /** BlueprintReplaceResponse */
        BlueprintReplaceResponse: {
            /** Id */
            id: string;
            /** Version Lock */
            version_lock: string;
        };
        /** Body_upload_files_api_v1_uploads_files_post */
        Body_upload_files_api_v1_uploads_files_post: {
            /**
             * Chunk Size
             * @default 1000
             */
            chunk_size: number;
            /** Files */
            files: string[];
            /** Metadata Json */
            metadata_json?: string | null;
            /**
             * Overlap
             * @default 200
             */
            overlap: number;
            /**
             * Scope
             * @default kb
             */
            scope: string;
        };
        /** ChatRequest */
        ChatRequest: {
            /**
             * Reset
             * @default false
             */
            reset: boolean;
            /** Session Id */
            session_id: string;
            /** User Message */
            user_message: string;
        };
        /** ChatResponse */
        ChatResponse: {
            /** Agent Name */
            agent_name: string;
            /** Assistant Message */
            assistant_message: string;
            /** Session Id */
            session_id: string;
        };
        /**
         * ComponentDefinition
         * @description Definition for a new component to validate and potentially register.
         *
         *     This enables validating tool/agent/workflow definitions BEFORE registration,
         *     ensuring only valid components enter the registry.
         */
        ComponentDefinition: {
            /**
             * Agent Llm Config
             * @description LLM configuration for the agent
             */
            agent_llm_config?: Record<string, never> | null;
            /**
             * Agent System Prompt
             * @description Agent system prompt
             */
            agent_system_prompt?: string | null;
            /**
             * Agent Tools
             * @description List of tool names this agent can use
             */
            agent_tools?: string[] | null;
            /**
             * Auto Register
             * @description Automatically register if validation passes
             * @default true
             */
            auto_register: boolean;
            /**
             * Code Class Code
             * @description Python code defining a code-node implementation class with async execute(workflow, cfg, ctx) -> dict
             */
            code_class_code?: string | null;
            /**
             * Code Factory Code
             * @description Python code defining a *factory function* for a code node (returns an implementation or callable)
             */
            code_factory_code?: string | null;
            /**
             * Description
             * @description Component description
             */
            description: string;
            /** Metadata */
            metadata?: Record<string, never>;
            /**
             * Name
             * @description Unique component name
             */
            name: string;
            /**
             * Tool Class Code
             * @description Python code defining the tool class (must inherit from ToolBase)
             */
            tool_class_code?: string | null;
            /**
             * Tool Factory Code
             * @description Python code defining a *factory function* that returns ToolBase
             */
            tool_factory_code?: string | null;
            /**
             * Tool Input Schema
             * @description JSON schema for tool inputs
             */
            tool_input_schema?: Record<string, never> | null;
            /**
             * Tool Output Schema
             * @description JSON schema for tool outputs
             */
            tool_output_schema?: Record<string, never> | null;
            /**
             * Type
             * @enum {string}
             */
            type: "tool" | "agent" | "workflow" | "code";
            /**
             * Validate Only
             * @description Only validate, never register (overrides auto_register)
             * @default false
             */
            validate_only: boolean;
            /**
             * Workflow Nodes
             * @description Nodes that make up the workflow
             */
            workflow_nodes?: components["schemas"]["NodeSpec"][] | null;
        };
        /**
         * ComponentRegisterResponse
         * @description Extends validation result with persistence metadata.
         */
        ComponentRegisterResponse: {
            /**
             * Component Id
             * @description Unique ID assigned to the component
             */
            component_id?: string | null;
            /** Component Type */
            component_type?: string | null;
            /**
             * Errors
             * @description Validation errors that must be fixed
             */
            errors?: string[];
            /**
             * Registered
             * @description Whether the component was registered
             * @default false
             */
            registered: boolean;
            /**
             * Registry Name
             * @description Name used in registry (may differ from definition.name)
             */
            registry_name?: string | null;
            /**
             * Suggestions
             * @description AI suggestions for improvement
             */
            suggestions?: string[];
            /**
             * Valid
             * @description Whether the component is valid
             */
            valid: boolean;
            /**
             * Validation Details
             * @description Detailed validation information
             */
            validation_details?: Record<string, never>;
            /** Version Lock */
            version_lock?: string | null;
            /**
             * Warnings
             * @description Warnings that should be addressed
             */
            warnings?: string[];
        };
        /**
         * ComponentScaffoldRequest
         * @description Request to scaffold a new component's starter code.
         *
         *     Args:
         *         type: Component type ("tool" | "agent" | "workflow" | "code")
         *         name: Desired public name
         *         template: Optional template variant hint (e.g., "basic", "llm")
         */
        ComponentScaffoldRequest: {
            /** Name */
            name: string;
            /** Template */
            template?: string | null;
            /**
             * Type
             * @enum {string}
             */
            type: "tool" | "agent" | "workflow" | "code";
        };
        /**
         * ComponentScaffoldResponse
         * @description Response containing scaffolded code and notes.
         *
         *     Returns:
         *         tool_factory_code/tool_class_code/agent_factory_code/code_factory_code depending on type
         *         notes: Guidance for the caller
         */
        ComponentScaffoldResponse: {
            /** Agent Factory Code */
            agent_factory_code?: string | null;
            /** Code Factory Code */
            code_factory_code?: string | null;
            /** Notes */
            notes: string;
            /** Tool Class Code */
            tool_class_code?: string | null;
            /** Tool Factory Code */
            tool_factory_code?: string | null;
        };
        /**
         * ComponentValidationResult
         * @description Result of component definition validation.
         */
        ComponentValidationResult: {
            /**
             * Component Id
             * @description Unique ID assigned to the component
             */
            component_id?: string | null;
            /** Component Type */
            component_type?: string | null;
            /**
             * Errors
             * @description Validation errors that must be fixed
             */
            errors?: string[];
            /**
             * Registered
             * @description Whether the component was registered
             * @default false
             */
            registered: boolean;
            /**
             * Registry Name
             * @description Name used in registry (may differ from definition.name)
             */
            registry_name?: string | null;
            /**
             * Suggestions
             * @description AI suggestions for improvement
             */
            suggestions?: string[];
            /**
             * Valid
             * @description Whether the component is valid
             */
            valid: boolean;
            /**
             * Validation Details
             * @description Detailed validation information
             */
            validation_details?: Record<string, never>;
            /**
             * Warnings
             * @description Warnings that should be addressed
             */
            warnings?: string[];
        };
        /**
         * DraftAck
         * @description Acknowledgement of a draft operation.
         */
        DraftAck: {
            /** Key */
            key: string;
            /**
             * Ok
             * @default true
             */
            ok: boolean;
            /**
             * Version
             * @default 0
             */
            version: number;
        };
        /**
         * DraftPayload
         * @description Draft payload model.
         *
         *     Attributes
         *     ----------
         *     data : dict[str, Any]
         *         Opaque draft data produced by the builder.
         *     version : int
         *         Optimistic concurrency version number (monotonic, starts at 1).
         *
         *     Example
         *     -------
         *     >>> DraftPayload(data={"nodes": [], "metadata": {"draft_name": "wip"}}, version=1)
         */
        DraftPayload: {
            /** Data */
            data?: Record<string, never>;
            /**
             * Version
             * @default 0
             */
            version: number;
        };
        /**
         * ExecutionStartRequest
         * @description Request body to start a workflow execution.
         *
         *     Args:
         *         blueprint_id (str): Identifier of a previously stored blueprint.
         *         inputs (Dict[str, Any] | None): Optional initial inputs passed to the workflow.
         *
         *     Returns:
         *         None
         */
        ExecutionStartRequest: {
            /**
             * Blueprint Id
             * @description Stored blueprint id
             */
            blueprint_id: string;
            /**
             * Inputs
             * @description Optional initial inputs for the workflow
             */
            inputs?: Record<string, never> | null;
        };
        /**
         * ExecutionStartResponse
         * @description Response for starting a workflow execution.
         *
         *     Args:
         *         execution_id (str): Identifier for the created execution.
         *         status (str): Current status (accepted, running, completed, failed, timeout).
         *         result (Dict[str, Any] | None): Final result when completed.
         *
         *     Returns:
         *         ExecutionStartResponse: Response model containing execution details.
         */
        ExecutionStartResponse: {
            /** Execution Id */
            execution_id: string;
            /** Result */
            result?: Record<string, never> | null;
            /** Status */
            status: string;
        };
        /**
         * ExecutionStatusResponse
         * @description Response model for execution status.
         */
        ExecutionStatusResponse: {
            /** Blueprint Id */
            blueprint_id?: string | null;
            /** Error */
            error?: string | null;
            /** Events */
            events?: Record<string, never>[] | null;
            /** Execution Id */
            execution_id: string;
            /** Result */
            result?: Record<string, never> | null;
            /** Status */
            status: string;
        };
        /** ExecutionsListItem */
        ExecutionsListItem: {
            /** Blueprint Id */
            blueprint_id: string;
            /** Execution Id */
            execution_id: string;
            /** Status */
            status: string;
        };
        /** ExecutionsListResponse */
        ExecutionsListResponse: {
            /** Executions */
            executions: components["schemas"]["ExecutionsListItem"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LibraryAssetIn */
        LibraryAssetIn: {
            /**
             * Content
             * @description Text content to store
             */
            content: string;
            /**
             * Label
             * @description Human label, unique per user
             */
            label: string;
            /**
             * Mime
             * @description MIME type, e.g., text/plain
             */
            mime?: string | null;
            /**
             * Org Id
             * @description Organization identifier
             */
            org_id?: string | null;
            /**
             * Scope
             * @description Logical scope, defaults to 'library'
             * @default library
             */
            scope: string;
            /**
             * User Id
             * @description User identifier
             */
            user_id?: string | null;
        };
        /** LibraryAssetOut */
        LibraryAssetOut: {
            /** Created At */
            created_at: string;
            /** Key */
            key: string;
            /** Meta Json */
            meta_json: Record<string, never>;
            /** Org Id */
            org_id: string | null;
            /** Scope */
            scope: string;
            /** User Id */
            user_id: string | null;
        };
        /**
         * MCPError
         * @description MCP JSON-RPC error response.
         */
        MCPError: {
            /** Code */
            code: number;
            /** Data */
            data?: unknown | null;
            /** Message */
            message: string;
        };
        /**
         * MCPResponse
         * @description MCP JSON-RPC response with validation.
         */
        MCPResponse: {
            error?: components["schemas"]["MCPError"] | null;
            /** Id */
            id?: string | number | null;
            /**
             * Jsonrpc
             * @default 2.0
             * @constant
             * @enum {string}
             */
            jsonrpc: "2.0";
            /** Result */
            result?: unknown | null;
        };
        /**
         * NodeCatalog
         * @description High-level node catalog for authoring UIs and copilots.
         */
        NodeCatalog: {
            /** Agents */
            agents?: string[];
            /** Chains */
            chains?: string[];
            /** Tools */
            tools?: components["schemas"]["ToolInfo"][];
            /** Workflows */
            workflows?: string[];
        };
        /**
         * NodePatch
         * @description A minimal, declarative mutation to a partial blueprint.
         *
         *     This captures add/remove/update operations in a way that can be validated
         *     without executing any code.
         */
        NodePatch: {
            /**
             * Action
             * @description add_node | remove_node | update_node
             */
            action: string;
            node?: components["schemas"]["PartialNodeSpec"] | null;
            /** Node Id */
            node_id?: string | null;
            /** Updates */
            updates?: Record<string, never> | null;
        };
        /**
         * NodeSchema
         * @description Pydantic JSON Schema for a node configuration class.
         */
        NodeSchema: {
            /**
             * Json Schema
             * @description Pydantic JSON Schema
             */
            json_schema: Record<string, never>;
            /**
             * Type
             * @description Canonical node type
             */
            type: string;
        };
        /**
         * NodeSpec
         * @description JSON-friendly node description (same keys as NodeConfig).
         */
        NodeSpec: {
            /** Dependencies */
            dependencies?: string[];
            /** Id */
            id: string;
            /** Type */
            type: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * PartialBlueprint
         * @description Blueprint under construction with validation relaxed.
         */
        PartialBlueprint: {
            /** Blueprint Id */
            blueprint_id?: string;
            /**
             * Is Complete
             * @description Whether blueprint is ready for execution
             * @default false
             */
            is_complete: boolean;
            /** Metadata */
            metadata?: Record<string, never>;
            /**
             * Next Suggestions
             * @description AI suggestions for next nodes
             */
            next_suggestions?: string[];
            /**
             * Nodes
             * @description Nodes added so far (can be empty)
             */
            nodes?: (components["schemas"]["NodeSpec"] | components["schemas"]["PartialNodeSpec"])[];
            /**
             * Schema Version
             * @default 1.1.0
             */
            schema_version: string;
            /**
             * Validation Errors
             * @description Current validation issues
             */
            validation_errors?: string[];
        };
        /**
         * PartialBlueprintUpdate
         * @description Update operation for partial blueprints.
         */
        PartialBlueprintUpdate: {
            /**
             * Action
             * @enum {string}
             */
            action: "add_node" | "remove_node" | "update_node" | "suggest";
            node?: components["schemas"]["PartialNodeSpec"] | null;
            /** Node Id */
            node_id?: string | null;
            /** Updates */
            updates?: Record<string, never> | null;
        };
        /**
         * PartialNodeSpec
         * @description Node spec that allows pending connections.
         */
        PartialNodeSpec: {
            /** Dependencies */
            dependencies?: string[];
            /** Id */
            id: string;
            /**
             * Pending Inputs
             * @description Input fields awaiting connection
             */
            pending_inputs?: string[] | null;
            /**
             * Pending Outputs
             * @description Output fields that could connect to other nodes
             */
            pending_outputs?: string[] | null;
            /**
             * Suggestions
             * @description Suggested next node types
             */
            suggestions?: string[] | null;
            /** Type */
            type: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * PreviewToolRequest
         * @description Request to preview-execute a generated code tool in a sandbox.
         *
         *     Parameters
         *     ----------
         *     language : str
         *         Programming language ("python" or "javascript").
         *     code : str
         *         Inline code to execute.
         *     inputs : dict[str, Any]
         *         Runtime inputs passed to the code node.
         *     imports : list[str]
         *         Optional allowed imports for the sandbox.
         *     timeout_seconds : int | None
         *         Optional overall timeout for the execution (seconds).
         *
         *     Example
         *     -------
         *     >>> PreviewToolRequest(language="python", code="print('hi')", inputs={})
         */
        PreviewToolRequest: {
            /** Code */
            code: string;
            /** Imports */
            imports?: string[];
            /** Inputs */
            inputs?: Record<string, never>;
            /**
             * Language
             * @default python
             */
            language: string;
            /**
             * Timeout Seconds
             * @default 5
             */
            timeout_seconds: number | null;
        };
        /** PreviewToolResponse */
        PreviewToolResponse: {
            /** Error */
            error?: string | null;
            /** Logs */
            logs?: Record<string, never>[] | null;
            /** Output */
            output?: unknown | null;
            /** Success */
            success: boolean;
        };
        /** ProposeRequest */
        ProposeRequest: {
            base?: components["schemas"]["PartialBlueprint"] | null;
            /** Text */
            text: string;
        };
        /** ProposeResponse */
        ProposeResponse: {
            blueprint: components["schemas"]["PartialBlueprint"];
        };
        /**
         * RunAck
         * @description Acknowledgement for run start.
         */
        RunAck: {
            /** Events Endpoint */
            events_endpoint: string;
            /** Run Id */
            run_id: string;
            /** Status Endpoint */
            status_endpoint: string;
        };
        /**
         * RunOptions
         * @description Options for workflow execution.
         */
        RunOptions: {
            /**
             * Max Parallel
             * @default 5
             */
            max_parallel: number;
        };
        /**
         * RunRequest
         * @description Request to execute a workflow.
         */
        RunRequest: {
            blueprint?: components["schemas"]["Blueprint"] | null;
            /** Blueprint Id */
            blueprint_id?: string | null;
            options?: components["schemas"]["RunOptions"];
        };
        /**
         * RunResult
         * @description Result of workflow execution.
         */
        RunResult: {
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Error */
            error?: string | null;
            /** Output */
            output?: Record<string, never>;
            /** Run Id */
            run_id: string;
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /** Success */
            success: boolean;
        };
        /** SessionAck */
        SessionAck: {
            /**
             * Ok
             * @default true
             */
            ok: boolean;
            /** Session Id */
            session_id: string;
        };
        /** SessionPayload */
        SessionPayload: {
            /** Data */
            data?: Record<string, never>;
        };
        /**
         * StorageHealth
         * @description Storage subsystem health response.
         *
         *     Returns
         *     -------
         *     StorageHealth
         *         The current storage backend and status.
         *
         *     Example
         *     -------
         *     >>> StorageHealth(backend="redis", status="ready").model_dump()
         *     {'backend': 'redis', 'status': 'ready'}
         */
        StorageHealth: {
            /**
             * Backend
             * @enum {string}
             */
            backend: "postgres" | "redis" | "in-memory";
            /** Connected */
            connected?: boolean | null;
            /** Migration Head */
            migration_head?: string | null;
            /**
             * Status
             * @constant
             * @enum {string}
             */
            status: "ready";
            /** Unscoped Rows */
            unscoped_rows?: number | null;
        };
        /** Suggestion */
        Suggestion: {
            /**
             * Confidence
             * @default 0.6
             */
            confidence: number;
            /** Reason */
            reason: string;
            /** Template */
            template?: Record<string, never> | null;
            /** Type */
            type: string;
        };
        /** TokenIssueRequest */
        TokenIssueRequest: {
            /** Expires At */
            expires_at?: string | null;
            /** Org Id */
            org_id?: string | null;
            /** Project Id */
            project_id?: string | null;
            /** Scopes */
            scopes?: string[];
            /** Ttl Days */
            ttl_days?: number | null;
            /** User Id */
            user_id?: string | null;
        };
        /** TokenIssueResponse */
        TokenIssueResponse: {
            /** Expires At */
            expires_at: string | null;
            /** Org Id */
            org_id: string | null;
            /** Project Id */
            project_id: string | null;
            /** Scopes */
            scopes: string[];
            /** Token */
            token: string;
            /** Token Hash */
            token_hash: string;
            /** User Id */
            user_id: string | null;
        };
        /** TokenListItem */
        TokenListItem: {
            /** Created At */
            created_at?: string | null;
            /** Expires At */
            expires_at?: string | null;
            /** Org Id */
            org_id: string | null;
            /** Project Id */
            project_id: string | null;
            /** Revoked */
            revoked: boolean;
            /** Scopes */
            scopes?: string[];
            /** Token Hash */
            token_hash: string;
            /** User Id */
            user_id: string | null;
        };
        /** TokenListResponse */
        TokenListResponse: {
            /** Items */
            items: components["schemas"]["TokenListItem"][];
        };
        /** TokenRevokeRequest */
        TokenRevokeRequest: {
            /** Token Hash */
            token_hash: string;
        };
        /**
         * ToolInfo
         * @description Catalog entry for a Tool node.
         *
         *     Attributes
         *     ----------
         *     name : str
         *         Registry name of the tool factory.
         *     input_schema : dict[str, Any]
         *         JSON Schema describing expected inputs.
         *     output_schema : dict[str, Any]
         *         JSON Schema describing outputs.
         *     ui_hints : dict[str, UIHints] | None
         *         Optional mapping of field name to UI hints.
         *     examples : list[dict[str, Any]] | None
         *         Example argument objects usable in studio.
         */
        ToolInfo: {
            /** Examples */
            examples?: Record<string, never>[] | null;
            /** Input Schema */
            input_schema?: Record<string, never>;
            /**
             * Name
             * @description Registry name of the tool factory
             */
            name: string;
            /** Output Schema */
            output_schema?: Record<string, never>;
            /** Ui Hints */
            ui_hints?: {
                [key: string]: components["schemas"]["UIHints"];
            } | null;
        };
        /**
         * UIHints
         * @description Optional UI rendering hints for studio forms.
         */
        UIHints: {
            /** Enum */
            enum?: string[] | null;
            /** Placeholder */
            placeholder?: string | null;
            /** Step */
            step?: number | null;
            /**
             * Widget
             * @description Preferred widget type
             */
            widget?: string | null;
        };
        /** UploadResponse */
        UploadResponse: {
            /** Count */
            count: number;
            /** Items */
            items: components["schemas"]["UploadResponseItem"][];
            /** Scope */
            scope: string;
        };
        /** UploadResponseItem */
        UploadResponseItem: {
            /** Filename */
            filename: string;
            /** Ingested Keys */
            ingested_keys?: string[];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** SuggestRequest */
        ice_api__api__builder_mcp__SuggestRequest: {
            /** Canvas State */
            canvas_state?: Record<string, never>;
            /** Model */
            model?: string | null;
            /** Provider */
            provider?: string | null;
            /** Temperature */
            temperature?: number | null;
            /** Text */
            text: string;
        };
        /** SuggestResponse */
        ice_api__api__builder_mcp__SuggestResponse: {
            /** Cost Estimate Usd */
            cost_estimate_usd?: number | null;
            /** Missing Fields */
            missing_fields?: Record<string, never> | null;
            /** Patches */
            patches: components["schemas"]["NodePatch"][];
            /** Questions */
            questions?: string[] | null;
        };
        /**
         * SuggestRequest
         * @description Request for suggestions for next nodes.
         *
         *     Args:
         *         top_k: Maximum number of suggestions to return
         *         allowed_types: Optional filter of node types to include
         *         commit: If true, persist summary suggestions and roll lock (requires X-Version-Lock)
         */
        ice_api__api__mcp__SuggestRequest: {
            /** Allowed Types */
            allowed_types?: string[] | null;
            /**
             * Commit
             * @default false
             */
            commit: boolean;
            /**
             * Top K
             * @default 5
             */
            top_k: number;
        };
        /** SuggestResponse */
        ice_api__api__mcp__SuggestResponse: {
            /** Context */
            context?: Record<string, never>;
            /** Suggestions */
            suggestions: components["schemas"]["Suggestion"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    mcp_jsonrpc_handler_api_mcp__post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPResponse"] | Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    compose_agent_api_mcp_agents_compose_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentComposeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComponentRegisterResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_blueprint_api_mcp_blueprints_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Blueprint"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_design_session_api_mcp_blueprints_design_session_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_design_session_api_mcp_blueprints_design_session__session_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_session_component_api_mcp_blueprints_design_session__session_id__register_component_post: {
        parameters: {
            query: {
                component_id: string;
            };
            header: {
                authorization: string;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_partial_blueprint_api_mcp_blueprints_partial_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PartialNodeSpec"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartialBlueprint"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_partial_blueprint_api_mcp_blueprints_partial__blueprint_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_partial_blueprint_api_mcp_blueprints_partial__blueprint_id__put: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartialBlueprintUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartialBlueprint"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    finalize_partial_blueprint_api_mcp_blueprints_partial__blueprint_id__finalize_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_next_nodes_api_mcp_blueprints_partial__blueprint_id__suggest_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ice_api__api__mcp__SuggestRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ice_api__api__mcp__SuggestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_blueprint_api_mcp_blueprints__blueprint_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_blueprint_visualization_api_mcp_blueprints__blueprint_id__visualization_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    chat_turn_api_mcp_chat__agent_name__post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                agent_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_all_components_api_mcp_components_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_component_api_mcp_components_register_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComponentDefinition"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComponentRegisterResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    scaffold_component_api_mcp_components_scaffold_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComponentScaffoldRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComponentScaffoldResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_component_definition_api_mcp_components_validate_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComponentDefinition"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComponentValidationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_components_by_type_api_mcp_components__component_type__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                component_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_component_api_mcp_components__component_type___name__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                component_type: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_component_api_mcp_components__component_type___name__put: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                component_type: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComponentDefinition"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_component_api_mcp_components__component_type___name__delete: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                component_type: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_run_api_mcp_runs_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RunRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_result_api_mcp_runs__run_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    event_stream_api_mcp_runs__run_id__events_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_graph_analysis_api_mcp_workflows__workflow_id__graph_analysis_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_layout_hints_api_mcp_workflows__workflow_id__graph_layout_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_graph_metrics_api_mcp_workflows__workflow_id__graph_metrics_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    find_workflow_patterns_api_mcp_workflows__workflow_id__graph_patterns_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    analyze_node_impact_api_mcp_workflows__workflow_id__nodes__node_id__impact_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                workflow_id: string;
                node_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_node_suggestions_api_mcp_workflows__workflow_id__nodes__node_id__suggestions_get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                workflow_id: string;
                node_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_agents_api_v1_agents_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    create_blueprint_api_v1_blueprints__post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Blueprint"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_blueprint_api_v1_blueprints__blueprint_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintGetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replace_blueprint_api_v1_blueprints__blueprint_id__put: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintReplaceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_blueprint_api_v1_blueprints__blueprint_id__delete: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_blueprint_api_v1_blueprints__blueprint_id__patch: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintPatchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    clone_blueprint_api_v1_blueprints__blueprint_id__clone_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                blueprint_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlueprintCloneResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    apply_api_v1_builder_apply_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_draft_api_v1_builder_drafts__key__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                /** @description Draft key identifier */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftPayload"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_draft_api_v1_builder_drafts__key__put: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                /** @description Draft key identifier */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DraftPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_draft_api_v1_builder_drafts__key__delete: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                /** @description Draft key identifier */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_tool_api_v1_builder_preview_tool_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PreviewToolRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PreviewToolResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    propose_api_v1_builder_propose_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProposeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProposeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_api_v1_builder_sessions__session_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionPayload"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_session_api_v1_builder_sessions__session_id__put: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SessionPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_session_api_v1_builder_sessions__session_id__delete: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionAck"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    suggest_api_v1_builder_suggest_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ice_api__api__builder_mcp__SuggestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ice_api__api__builder_mcp__SuggestResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_chains_api_v1_chains_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    diag_llm_api_v1_diag_llm_get: {
        parameters: {
            query: {
                /** @description Provider id (openai|anthropic|google|deepseek) */
                provider: string;
                /** @description Model name (e.g., gpt-4o) */
                model: string;
            };
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_executions_api_v1_executions__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionsListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_execution_api_v1_executions__post: {
        parameters: {
            query?: {
                /** @description Optional: block up to N seconds and return final status/result instead of an execution_id. */
                wait_seconds?: number | null;
            };
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExecutionStartRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionStartResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_execution_status_api_v1_executions__execution_id__get: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionStatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_execution_api_v1_executions__execution_id__cancel_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_executors_api_v1_executors_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    list_assets_api_v1_library_assets_get: {
        parameters: {
            query?: {
                org_id?: string | null;
                user_id?: string | null;
                /** @description Filter by label prefix */
                prefix?: string | null;
                limit?: number;
            };
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_asset_api_v1_library_assets_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LibraryAssetIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_library_api_v1_library_assets_index_get: {
        parameters: {
            query?: {
                /** @description Name contains filter */
                q?: string | null;
                /** @description component|blueprint */
                kind?: string | null;
                limit?: number;
            };
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_asset_api_v1_library_assets__label__get: {
        parameters: {
            query?: {
                org_id?: string | null;
                user_id?: string | null;
            };
            header: {
                authorization: string;
            };
            path: {
                label: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryAssetOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_asset_api_v1_library_assets__label__delete: {
        parameters: {
            query?: {
                org_id?: string | null;
                user_id?: string | null;
            };
            header: {
                authorization: string;
            };
            path: {
                label: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    mcp_jsonrpc_handler_api_v1_mcp__post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPResponse"] | Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    meta_components_api_v1_meta_components_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    list_node_catalog_api_v1_meta_nodes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeCatalog"];
                };
            };
        };
    };
    get_tool_details_api_v1_meta_nodes_tool__tool_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tool_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_node_types_api_v1_meta_nodes_types_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    get_node_schema_api_v1_meta_nodes__node_type__schema_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                node_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    registry_health_api_v1_meta_registry_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    storage_health_api_v1_meta_storage_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageHealth"];
                };
            };
        };
    };
    version_info_api_v1_meta_version_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    list_tokens_api_v1_tokens__get: {
        parameters: {
            query?: {
                org_id?: string | null;
                project_id?: string | null;
                user_id?: string | null;
                limit?: number;
            };
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    issue_token_api_v1_tokens__post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenIssueRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenIssueResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    revoke_token_api_v1_tokens_revoke_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRevokeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_token_api_v1_tokens__token_hash__delete: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path: {
                token_hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tools_api_v1_tools_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    upload_files_api_v1_uploads_files_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_files_api_v1_uploads_files_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workflows_api_v1_workflows_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    health_check_legacy_healthz_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    live_check_livez_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    ready_check_readyz_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
}
