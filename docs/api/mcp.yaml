openapi: 3.1.0
info:
  title: iceOS Model Context Protocol (MCP)
  version: 0.2.0
  description: |
    Minimal MCP contract for alpha release.
    Covers:
      • Blueprint registration / upsert
      • Run execution
      • Result polling
      • Telemetry (SSE stream via Redis)
servers:
  - url: https://{host}/api/v1/mcp
paths:
  /blueprints:
    post:
      summary: Register or upsert a blueprint
      operationId: createBlueprint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blueprint'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintAck'
  /runs:
    post:
      summary: Execute a blueprint (by id or inline)
      operationId: startRun
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunRequest'
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAck'
  /runs/{run_id}:
    get:
      summary: Fetch final RunResult (202 while running)
      parameters:
        - in: path
          name: run_id
          required: true
          schema:
            type: string
        - in: query
          name: wait
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResult'
        "202":
          description: Still running
  /runs/{run_id}/events:
    get:
      summary: Server-Sent Events stream – emits `workflow.nodeStarted`, `workflow.nodeFinished`, `workflow.finished` events
      parameters:
        - in: path
          name: run_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: text/event-stream
          content:
            text/event-stream:
              schema:
                type: string
components:
  schemas:
    NodeSpec:
      type: object
      required: [id, type]
      additionalProperties: true
    Blueprint:
      type: object
      required: [blueprint_id, schema_version, nodes]
      properties:
        blueprint_id:
          type: string
        schema_version:
          type: string
          example: "1.1.0"
        metadata:
          type: object
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/NodeSpec'
    BlueprintAck:
      type: object
      properties:
        blueprint_id:
          type: string
        status:
          type: string
          enum: [accepted, updated]
    RunOptions:
      type: object
      properties:
        max_parallel:
          type: integer
          minimum: 1
          maximum: 20
    RunRequest:
      type: object
      oneOf:
        - required: [blueprint_id]
        - required: [blueprint]
      properties:
        blueprint_id:
          type: string
        blueprint:
          $ref: '#/components/schemas/Blueprint'
        options:
          $ref: '#/components/schemas/RunOptions'
    RunAck:
      type: object
      properties:
        run_id:
          type: string
        status_endpoint:
          type: string
        events_endpoint:
          type: string
    RunResult:
      type: object
      properties:
        run_id:
          type: string
        success:
          type: boolean
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        output:
          type: object
        error:
          type: string
          nullable: true 