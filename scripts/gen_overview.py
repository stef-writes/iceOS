#!/usr/bin/env python3
"""Generate a markdown overview of top-level packages.

This was previously located in ``dev_tools/legacy``; it has been promoted
into ``scripts/`` so that build tools and CLI wrappers can reference a
single canonical implementation.
"""
from __future__ import annotations

import ast
from pathlib import Path
from typing import List

OUTPUT_FILE = Path("docs") / "codebase_overview.md"
SRC_DIR = Path("src")
MAX_DEPTH = 2


class PackageInfo:
    def __init__(self, name: str, path: Path):
        self.name = name
        self.path = path


def gather_packages() -> List[PackageInfo]:
    packages: List[PackageInfo] = []
    for path in SRC_DIR.rglob("__init__.py"):
        depth = len(path.relative_to(SRC_DIR).parents) - 1
        if depth > MAX_DEPTH:
            continue
        pkg_path = path.parent
        dotted = pkg_path.relative_to(SRC_DIR).as_posix().replace("/", ".")
        packages.append(PackageInfo(dotted, pkg_path))
    packages.sort(key=lambda p: p.name)
    return packages


def first_docstring_line(py_file: Path):
    try:
        module = ast.parse(py_file.read_text(encoding="utf-8"))
    except Exception:
        return None
    doc = ast.get_docstring(module)
    if doc:
        for line in doc.splitlines():
            cleaned = line.strip()
            if cleaned:
                return cleaned
    return None


def describe_package(pkg: PackageInfo) -> str:
    init_file = pkg.path / "__init__.py"
    line = first_docstring_line(init_file)
    return line or "(no description)"


def build_markdown(pkgs: List[PackageInfo]) -> str:
    lines: List[str] = [
        "# Codebase Overview (auto-generated)",
        "",
        "> Generated by scripts/gen_overview.py",
        "",
        "## Packages",
        "",
    ]
    for pkg in pkgs:
        desc = describe_package(pkg)
        lines.append(f"- **`{pkg.name}`** â€“ {desc}")
    return "\n".join(lines) + "\n"


def main() -> None:
    pkgs = gather_packages()
    markdown = build_markdown(pkgs)
    OUTPUT_FILE.parent.mkdir(parents=True, exist_ok=True)
    OUTPUT_FILE.write_text(markdown, encoding="utf-8")
    print(f"[scripts.gen_overview] wrote {len(pkgs)} entries to {OUTPUT_FILE}")


if __name__ == "__main__":
    main()
