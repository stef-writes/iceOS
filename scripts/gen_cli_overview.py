#!/usr/bin/env python3
"""Generate a Markdown overview of the `ice` CLI commands.

Reads the Typer `app` defined in `ice_cli.cli` and recursively lists every
command and sub-command, writing the result to
`docs/architecture/cli_overview.md`.

Usage
-----
$ poetry run python scripts/gen_cli_overview.py

This file is automatically re-generated by *make refresh-docs*; manual edits to
`docs/architecture/cli_overview.md` will be overwritten.
"""
from __future__ import annotations

from pathlib import Path
from typing import Final, List

import click  # Typer builds on Click

from ice_cli.cli import app  # The canonical CLI definition (root group)

_OUTPUT_PATH: Final[Path] = Path("docs/architecture/cli_overview.md")


def _describe(cmd: click.Command) -> str:
    """Return the first sentence of the help string (or empty)."""
    if not cmd.help:
        return ""
    return cmd.help.split("\n")[0].rstrip(".")


def _walk(cmd: click.Command, depth: int = 0) -> List[str]:
    """Depth-first walk through command tree producing Markdown bullets."""
    indent = "  " * depth
    name = cmd.name or "ice"  # Root app may not have name set
    desc = _describe(cmd)
    bullet = f"{indent}* `{name}` – {desc}".rstrip()
    lines: List[str] = [bullet]

    if isinstance(cmd, click.Group):
        # click.Group.commands: dict[str, click.Command]
        for sub in sorted(cmd.commands.values(), key=lambda c: c.name):
            lines.extend(_walk(sub, depth + 1))
    return lines


def main() -> None:  # – CLI entry-point
    """Write the up-to-date CLI overview Markdown file."""
    md_lines: List[str] = [
        "# ice CLI Overview (auto-generated)",
        "",
        "> Generated by scripts/gen_cli_overview.py – do not edit manually.",
        "",
        "## Commands",
        "",
    ]
    md_lines.extend(_walk(app))
    md_lines.append("")

    _OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    _OUTPUT_PATH.write_text("\n".join(md_lines), encoding="utf-8")
    print(f"[gen_cli_overview] wrote {_OUTPUT_PATH.relative_to(Path.cwd())}")


if __name__ == "__main__":  # pragma: no cover – script runner
    main()
