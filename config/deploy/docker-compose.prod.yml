services:
  web:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    env_file:
      - ../../.env.prod
    environment:
      NEXT_TELEMETRY_DISABLED: 1
    restart: always
    dns:
      - 1.1.1.1
      - 8.8.8.8
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s
  api:
    build:
      context: ../..
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ../../.env.prod
    environment:
      ICE_BEHIND_PROXY: "0"
      # Runtime flags (literals kept here; secrets/urls via env_file)
      ICEOS_RUN_MIGRATIONS: "0"
      ICEOS_REQUIRE_DB: "1"
      ICEOS_MIGRATION_VERIFY: "0"
      ICE_ENABLE_WASM: "1"
      ICE_BUILDER_USE_PROMPT_PLANNER: "1"
      ICE_SKIP_EXTERNAL: "0"
      ICE_DEFAULT_LLM_PROVIDER: "openai"
      ICE_DEFAULT_LLM_MODEL: "gpt-4o"
      ICEOS_SKIP_COMPONENT_VALIDATION: "1"
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 9.9.9.9
    command: >
      sh -lc "python scripts/netcheck.py && uvicorn ice_api.main:app --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"

    # Optionally start local DB/Redis via profile "db"; no hard depends for managed services
    healthcheck:
      test: ["CMD-SHELL", "python scripts/netcheck.py && wget -qO- http://localhost:8000/readyz >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

  postgres:
    profiles: ["db"]
    # In production prefer a managed Postgres; this service is optional
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-iceos}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-iceos}
      POSTGRES_DB: ${POSTGRES_DB:-iceos}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-iceos} -d ${POSTGRES_DB:-iceos} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    profiles: ["db"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    volumes:
      - redis_data:/data

volumes:
  pg_data:
  redis_data:
