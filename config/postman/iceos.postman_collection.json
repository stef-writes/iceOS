{
  "info": {
    "name": "iceOS API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Postman collection for core iceOS endpoints"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8000" },
    { "key": "apiToken", "value": "dev-token" },
    { "key": "blueprintId", "value": "" },
    { "key": "executionId", "value": "" }
  ],
  "item": [
    {
      "name": "Library",
      "item": [
        {
          "name": "Add asset",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/api/v1/library/assets", "host": ["{{baseUrl}}"], "path": ["api","v1","library","assets"] },
            "body": { "mode": "raw", "raw": "{\n  \"label\": \"greeting\",\n  \"content\": \"hello world\",\n  \"mime\": \"text/plain\",\n  \"org_id\": \"demo_org\",\n  \"user_id\": \"demo_user\"\n}" }
          }
        },
        {
          "name": "List assets",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" } ],
            "url": { "raw": "{{baseUrl}}/api/v1/library/assets?org_id=demo_org&user_id=demo_user&limit=5", "host": ["{{baseUrl}}"], "path": ["api","v1","library","assets"], "query": [ {"key":"org_id","value":"demo_org"},{"key":"user_id","value":"demo_user"},{"key":"limit","value":"5"} ] }
          }
        },
        {
          "name": "Get asset",
          "request": {
            "method": "GET",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" } ],
            "url": { "raw": "{{baseUrl}}/api/v1/library/assets/greeting?org_id=demo_org&user_id=demo_user", "host": ["{{baseUrl}}"], "path": ["api","v1","library","assets","greeting"], "query": [ {"key":"org_id","value":"demo_org"},{"key":"user_id","value":"demo_user"} ] }
          }
        },
        {
          "name": "Delete asset",
          "request": {
            "method": "DELETE",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" } ],
            "url": { "raw": "{{baseUrl}}/api/v1/library/assets/greeting?org_id=demo_org&user_id=demo_user", "host": ["{{baseUrl}}"], "path": ["api","v1","library","assets","greeting"], "query": [ {"key":"org_id","value":"demo_org"},{"key":"user_id","value":"demo_user"} ] }
          }
        }
      ]
    },
    {
      "name": "Discovery & Schemas",
      "item": [
        {
          "name": "Node types",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/api/v1/meta/nodes/types", "host": ["{{baseUrl}}"], "path": ["api","v1","meta","nodes","types"] }
          }
        },
        {
          "name": "Node schema (llm)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/api/v1/meta/nodes/llm/schema", "host": ["{{baseUrl}}"], "path": ["api","v1","meta","nodes","llm","schema"] }
          }
        },
        {
          "name": "Tool schema (writer_tool)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{baseUrl}}/api/v1/meta/nodes/tool/writer_tool", "host": ["{{baseUrl}}"], "path": ["api","v1","meta","nodes","tool","writer_tool"] }
          }
        }
      ]
    },
    {
      "name": "Health",
      "item": [
        { "name": "readyz", "request": { "method": "GET", "header": [], "url": { "raw": "{{baseUrl}}/readyz", "host": ["{{baseUrl}}"], "path": ["readyz"] } } },
        { "name": "livez",  "request": { "method": "GET", "header": [], "url": { "raw": "{{baseUrl}}/livez",  "host": ["{{baseUrl}}"], "path": ["livez"] } } },
        { "name": "version","request": { "method": "GET", "header": [], "url": { "raw": "{{baseUrl}}/api/v1/meta/version", "host": ["{{baseUrl}}"], "path": ["api","v1","meta","version"] } } },
        { "name": "storage","request": { "method": "GET", "header": [], "url": { "raw": "{{baseUrl}}/api/v1/meta/storage", "host": ["{{baseUrl}}"], "path": ["api","v1","meta","storage"] } } }
      ]
    },
    {
      "name": "Metrics",
      "item": [
        { "name": "metrics (gated)", "request": { "method": "GET", "header": [], "url": { "raw": "{{baseUrl}}/metrics", "host": ["{{baseUrl}}"], "path": ["metrics"] } } }
      ]
    },
    {
      "name": "Drafts (gated)",
      "item": [
        {
          "name": "create or get draft",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" } ],
            "url": { "raw": "{{baseUrl}}/api/v1/drafts/session123", "host": ["{{baseUrl}}"], "path": ["api","v1","drafts","session123"] }
          }
        }
      ]
    },
    {
      "name": "Blueprints",
      "item": [
        {
          "name": "Create blueprint (__new__)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{apiToken}}" },
              { "key": "X-Version-Lock", "value": "__new__" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": { "raw": "{{baseUrl}}/api/v1/blueprints/", "host": ["{{baseUrl}}"], "path": ["api","v1","blueprints","" ] },
            "body": { "mode": "raw", "raw": "{\n  \"schema_version\": \"1.2.0\",\n  \"metadata\": {\"draft_name\": \"postman_demo\"},\n  \"nodes\": [\n    {\n      \"id\": \"llm1\",\n      \"type\": \"llm\",\n      \"model\": \"gpt-4o\",\n      \"prompt\": \"Hello {{ inputs.name }}\",\n      \"llm_config\": {\"provider\": \"openai\", \"model\": \"gpt-4o\"},\n      \"output_schema\": {\"text\": \"string\"}\n    }\n  ]\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try {",
                  "  const data = pm.response.json();",
                  "  if (data && data.id) {",
                  "    pm.collectionVariables.set('blueprintId', data.id);",
                  "    pm.test('Captured blueprintId', function () { pm.expect(data.id).to.be.a('string'); });",
                  "  }",
                  "} catch (e) { }"
                ]
              }
            }
          ]
        },
        { "name": "Get blueprint by id", "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" } ], "url": { "raw": "{{baseUrl}}/api/v1/blueprints/{{blueprintId}}", "host": ["{{baseUrl}}"], "path": ["api","v1","blueprints","{{blueprintId}}"] } } }
      ]
    },
    {
      "name": "Executions",
      "item": [
        {
          "name": "Start execution",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/api/v1/executions/", "host": ["{{baseUrl}}"], "path": ["api","v1","executions","" ] },
            "body": { "mode": "raw", "raw": "{\n  \"blueprint_id\": \"{{blueprintId}}\",\n  \"inputs\": {\"name\": \"World\"}\n}" }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "try {",
                  "  const data = pm.response.json();",
                  "  if (data && data.execution_id) {",
                  "    pm.collectionVariables.set('executionId', data.execution_id);",
                  "    pm.test('Captured executionId', function () { pm.expect(data.execution_id).to.be.a('string'); });",
                  "  }",
                  "} catch (e) { }"
                ]
              }
            }
          ]
        },
        { "name": "Get execution by id", "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" } ], "url": { "raw": "{{baseUrl}}/api/v1/executions/{{executionId}}", "host": ["{{baseUrl}}"], "path": ["api","v1","executions","{{executionId}}"] } } }
      ]
    },
    {
      "name": "MCP JSON-RPC",
      "item": [
        {
          "name": "Initialize",
          "request": {
            "method": "POST",
            "header": [ { "key": "Authorization", "value": "Bearer {{apiToken}}" }, { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/api/mcp", "host": ["{{baseUrl}}"], "path": ["api","mcp"] },
            "body": { "mode": "raw", "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 0,\n  \"method\": \"initialize\",\n  \"params\": {}\n}" }
          }
        }
      ]
    }
  ]
}
