version: "3.9"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-iceos}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-iceos}
      POSTGRES_DB: ${POSTGRES_DB:-iceos}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: always
    networks: [backend]
    volumes:
      - pg_data:/var/lib/postgresql/data
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "yes"]
    restart: always
    networks: [backend]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  api:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    # Keep a single healthcheck (detailed) below
    ports:
      - "8000:8000"
    restart: always
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/ice
    volumes:
      - api_data:/app/data
      - ./scripts:/app/scripts:ro
      - ./src:/app/src:ro
    env_file:
      - config/dev.env.example
    environment:
      # Override Redis URL to point to compose service
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_CLIENT_NAME: ${REDIS_CLIENT_NAME:-ice_api}
      REDIS_DECODE_RESPONSES: ${REDIS_DECODE_RESPONSES:-1}
      REDIS_SOCKET_TIMEOUT: ${REDIS_SOCKET_TIMEOUT:-5.0}
      REDIS_SOCKET_CONNECT_TIMEOUT: ${REDIS_SOCKET_CONNECT_TIMEOUT:-3.0}
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-100}
      CHAT_TTL_SECONDS: ${CHAT_TTL_SECONDS:-2592000}
      EXECUTION_TTL_SECONDS: ${EXECUTION_TTL_SECONDS:-604800}
      ORG_BUDGET_USD: ${ORG_BUDGET_USD:-5.00}
      # Allow dev token in local compose so frontend default token works
      ICE_ALLOW_DEV_TOKEN: ${ICE_ALLOW_DEV_TOKEN:-1}
      ICE_API_TOKEN: ${ICE_API_TOKEN:-dev-token}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Demo-friendly rate limits (dev only)
      ICE_RATE_WINDOW_SECONDS: ${ICE_RATE_WINDOW_SECONDS:-1.0}
      ICE_RATE_MAX_REQUESTS: ${ICE_RATE_MAX_REQUESTS:-1000}
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://iceos:iceos@postgres:5432/iceos}
      # For local dev, run without mandatory DB migrations; API falls back to in-memory store when DB is unavailable
      ICEOS_RUN_MIGRATIONS: ${ICEOS_RUN_MIGRATIONS:-0}
      ICEOS_REQUIRE_DB: ${ICEOS_REQUIRE_DB:-0}
      # Limit manifests to valid plugins.v0 tool kits for local dev; load templates via Templates API on demand
      ICEOS_PLUGIN_MANIFESTS: ${ICEOS_PLUGIN_MANIFESTS:-/app/plugins/kits/tools/memory/plugins.v0.yaml,/app/plugins/kits/tools/search/plugins.v0.yaml}
      CONTEXT_STORE_BACKEND: ${CONTEXT_STORE_BACKEND:-redis}
      # Observability (optional)
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-iceos-api}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel:4318}
      # Behind reverse proxy in compose â€“ tighten CORS/hosts automatically
      ICE_BEHIND_PROXY: ${ICE_BEHIND_PROXY:-1}
      ICE_BUILDER_USE_PROMPT_PLANNER: ${ICE_BUILDER_USE_PROMPT_PLANNER:-1}
    command: ["uvicorn", "ice_api.main:app", "--host", "0.0.0.0", "--port", "8000", "--timeout-keep-alive", "5", "--limit-concurrency", "100"]
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/readyz"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [backend]

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_started
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-/api}
      NEXT_PUBLIC_API_TOKEN: ${NEXT_PUBLIC_API_TOKEN:-dev-token}
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    restart: always
    networks: [backend]

  # proxy removed for stability; access web at http://localhost:3000 and api at http://localhost:8000

  # Optional: enable an OpenTelemetry collector via a separate profile when configured
  # otel:
  #   image: otel/opentelemetry-collector:0.103.1
  #   command: ["--config=/etc/otel-config.yaml"]
  #   volumes:
  #     - ./ops/otel-config.yaml:/etc/otel-config.yaml:ro
  #   restart: always
  #   networks: [backend]

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://iceos:iceos@postgres:5432/iceos}
    command: ["bash", "-lc", "alembic -c alembic.ini upgrade head"]
    restart: "no"
    networks: [backend]

volumes:
  redis_data:
  api_data:
  pg_data:

networks:
  backend:
