

 [tool.poetry]
 # Package discovery and layout remain managed by Poetry-specific settings
 packages = [
   { include = "ice_orchestrator", from = "src" },
   { include = "ice_cli", from = "src" },
   { include = "ice_api", from = "src" },
   { include = "ice_core", from = "src" },
   { include = "ice_builder", from = "src" },
   { include = "ice_client", from = "src" },
 ]
 include = [
   "src/ice_api/templates/*.json",
   "src/ice_api/data/*.json"
 ]
 exclude = ["examples", "tests", "scripts"]

# ---------------------------------------------------------------------------
# NOTE: Configuration files have been organized into config/ directory:
# - config/linting/ruff.toml - Ruff linter configuration
# - config/typing/mypy.ini - MyPy type checking configuration
# - config/testing/pytest.ini - Pytest configuration
# Use: ruff check --config config/linting/ruff.toml
#      mypy --config-file config/typing/mypy.ini
#      pytest -c config/testing/pytest.ini
# ---------------------------------------------------------------------------

 [project.entry-points."proto"]
 "orchestrator/v1alpha/network.proto" = "ice_core.protocols.mcp.models:NetworkSpec"

[project]
name = "iceos"
version = "0.5.0"
description = "iceOS – Intelligent Composable Environment platform"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
  { name = "iceOS contributors", email = "opensource@iceos.dev" }
]
requires-python = ">=3.10,<4.0"

[project.scripts]
ice = "ice_cli.cli:app"

[project.optional-dependencies]
llm_openai = ["openai", "tiktoken"]
llm_anthropic = ["anthropic"]
llm_gemini = ["google-generativeai"]
# Optional heavy ML stack for vector memory & embeddings
embeddings = [
  "sentence-transformers",
  "torch",
  "scikit-learn"
]

dependencies = [
  "redis>=4.6.0",
  "aiohttp>=3.9.3",
  "numpy>=1.26",
  "alembic>=1.12.1",
  "anthropic==0.19.0",
  "fastapi>=0.109.1,<0.200",
  "google-generativeai==0.4.0",
  "httpx==0.24.1",
  "jmespath>=1.0.1",
  "pypdf>=3.17.0",
  "networkx>=3.1",
  "croniter>=2.0.0",
  "openai==1.14.1",
  "opentelemetry-api>=1.23.0",
  "opentelemetry-sdk>=1.23.0",
  "jsonschema>=4.22.0",
  "PyYAML>=6.0",
  "packaging>=23.2",
  "pydantic>=2.7.0",
  "python-dotenv>=1.0.0",
  "setuptools>=78.1.1",
  "sqlalchemy>=2.0.23",
  "structlog>=24.1.0",
  "annoy>=1.17.3",
  "cryptography>=44.0.1",
  "typer>=0.12.1",
  "watchdog>=4.0.0",
  "tenacity>=8.2.3",
  "prometheus_client==0.19.0",
  "tiktoken>=0.5.1",
  "uvicorn>=0.24.0",
  "wasmtime>=24.0.0",
  "python-multipart>=0.0.18",
  "rich>=13.6.0",
  "nest_asyncio>=1.6.0",
  "jinja2>=3.1.3",
  "sse-starlette>=2.1.0",
]

[build-system]
requires = [
  "poetry-core>=1.0.0",
  "setuptools>=68",
  "pip>=23",
  "betterproto[compiler]",
]
build-backend = "poetry.core.masonry.api"



[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

# Existing dependencies
#[tool.poetry.dependencies]  # migrated to [project] section

[tool.poetry.group.dev.dependencies]
pip-licenses = "^4.3.2"
coverage = "^7.2.0"
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
pytest-cov = "^4.1.0"
pytest-html = "^4.1.1"
pytest-metadata = "^3.0.0"
pytest-mock = "^3.12.0"
pytest-randomly = "^3.15.0"
pytest-timeout = "^2.2.0"
# AST codemod dependency ----------------------------------
libcst = "^1.1.0"
pytest-xdist = "^3.3.1"
# Upgrade black to patched release (PYSEC-2024-48)
black = "^24.4.0"
flake8 = "^6.1.0"
isort = "^5.12.0"
mypy = "^1.5.0"
# Tooling ----------------------------------------
ruff = "^0.1.7"
pip-audit = "^2.7.2"
types-PyYAML = "^6.0.12.20250516"
pyright = "^1.1.402"
import-linter = "^2.3.0"

mutmut = "^2.5"
testcontainers = "^4.5"

questionary = "^2.0.1"
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.9"
mkdocstrings = "^0.24.0"
mkdocstrings-python = "^1.7.0"
mkdocs-include-markdown-plugin = "^6.0.4"
mkdocs-autorefs = "^1.0.1"
griffe = "<1.0"
pre-commit = "4.2.0"
pip = ">=23.3"
setuptools = ">=78.1.1"
sqlalchemy = "^2.0.23"
vulture = "^2.14"
pydantic = {extras = ["mypy"], version = "^2.12.0a1", allow-prereleases = true}
types-redis = {version = "^4.6.0.20241004", allow-prereleases = true}



# ---------------------------------------------------------------------------
# Static typing configuration (pyright) -------------------------------------
# ---------------------------------------------------------------------------

[tool.pyright]
# Only enforce strict typing on new app & CLI code until older packages are modernised.
# Packages listed in *exclude* are still type-checked in *basic* mode when imported
# elsewhere, but errors are silenced for their own source files.
typeCheckingMode = "basic"
exclude = [
  "src/ice_orchestrator",
]
reportMissingTypeStubs = false
reportUnknownMemberType = false

# ---------------------------------------------------------------------------
# Ruff – Python linter configuration ---------------------------------------
# ---------------------------------------------------------------------------

[tool.ruff]
line-length = 88
# Target the same Python version used elsewhere
target-version = "py310"

# Suppress import-after-top-level rule across the repo until legacy modules are cleaned up.
[tool.ruff.lint]
ignore = ["E402"]

# Exclude auto-generated/compiled artefacts
exclude = [
  "site",
  "htmlcov",
  "tests",
  "scripts",
]

# Per-file ignores – allow more relaxed style in tests & helper scripts
[tool.ruff.per-file-ignores]
"tests/**/*" = ["E402", "F401", "F841"]
"scripts/**/*" = ["E402"]
