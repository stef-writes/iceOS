 [tool.poetry]
 # Package discovery and layout remain managed by Poetry-specific settings
package-mode = false
 packages = [
   { include = "ice_orchestrator", from = "src" },
   { include = "ice_cli", from = "src" },
   { include = "ice_api", from = "src" },
   { include = "ice_core", from = "src" },
   { include = "ice_builder", from = "src" },
   { include = "ice_client", from = "src" },
 ]
 include = [
   "src/ice_api/templates/*.json",
   "src/ice_api/data/*.json"
 ]
 exclude = ["examples", "tests", "scripts"]

# ---------------------------------------------------------------------------
# NOTE: Configuration files have been organized into config/ directory:
# - config/linting/ruff.toml - Ruff linter configuration
# - config/typing/mypy.ini - MyPy type checking configuration
# - config/testing/pytest.ini - Pytest configuration
# Use: ruff check --config config/linting/ruff.toml
#      mypy --config-file config/typing/mypy.ini
#      pytest -c config/testing/pytest.ini
# ---------------------------------------------------------------------------



[build-system]
requires = [
  "poetry-core>=1.0.0",
  "setuptools>=68",
  "pip==24.1.2",
  "betterproto[compiler]",
]
build-backend = "poetry.core.masonry.api"



[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

# Poetry console scripts
[tool.poetry.scripts]
ice = "ice_cli.cli:app"

# Optional dependency groups (extras)
[tool.poetry.extras]
llm_openai = ["openai", "tiktoken"]
llm_anthropic = ["anthropic"]
llm_gemini = ["google-generativeai"]
telemetry = ["opentelemetry-api", "opentelemetry-sdk"]
database = ["sqlalchemy", "alembic", "asyncpg", "psycopg2-binary"]
vector = ["annoy", "numpy"]
pdf = ["pypdf"]
cron = ["croniter"]
wasm = ["wasmtime"]
filewatch = ["watchdog"]
test_integration = [
  "redis",
  "testcontainers",
]

# Align Poetry classic solver with PEP 621 python requirement
[tool.poetry.dependencies]
python = ">=3.11,<3.12"
redis = ">=4.6.0"
aiohttp = ">=3.9.3"
fastapi = ">=0.109.1,<0.200"
httpx = "==0.24.1"
jmespath = ">=1.0.1"
networkx = ">=3.1"
jsonschema = ">=4.22.0"
PyYAML = ">=6.0"
packaging = ">=23.2"
pydantic = ">=2.7.0"
python-dotenv = ">=1.0.0"
setuptools = ">=78.1.1"
structlog = ">=24.1.0"
typer = ">=0.12.1"
tiktoken = ">=0.5.1"
uvicorn = ">=0.24.0"
python-multipart = ">=0.0.18"
rich = ">=13.6.0"
nest_asyncio = ">=1.6.0"
jinja2 = ">=3.1.3"
sse-starlette = ">=2.1.0"
openai = {version = "==1.14.1", optional = true}
anthropic = {version = "==0.19.0", optional = true}
google-generativeai = {version = "==0.4.0", optional = true}
opentelemetry-api = {version = ">=1.23.0", optional = true}
opentelemetry-sdk = {version = ">=1.23.0", optional = true}
sqlalchemy = {version = ">=2.0.23", optional = true}
alembic = {version = ">=1.12.1", optional = true}
asyncpg = {version = ">=0.29.0", optional = true}
psycopg2-binary = {version = ">=2.9.9", optional = true}
annoy = {version = ">=1.17.3", optional = true}
numpy = {version = ">=1.26", optional = true}
pypdf = {version = ">=3.17.0", optional = true}
croniter = {version = ">=2.0.0", optional = true}
wasmtime = {version = ">=24.0.0", optional = true}
watchdog = {version = ">=4.0.0", optional = true}

[tool.poetry.group.dev.dependencies]
pip-licenses = "^4.3.2"
coverage = "^7.2.0"
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-benchmark = "^4.0.0"
pytest-cov = "^4.1.0"
pytest-html = "^4.1.1"
pytest-metadata = "^3.0.0"
pytest-mock = "^3.12.0"
pytest-randomly = "^3.15.0"
pytest-timeout = "^2.2.0"
# AST codemod dependency ----------------------------------
libcst = "^1.1.0"
pytest-xdist = "^3.3.1"
# Upgrade black to patched release (PYSEC-2024-48)
black = "^24.4.0"
flake8 = "^6.1.0"
isort = "^5.12.0"
mypy = "==1.10.0"
# Tooling ----------------------------------------
ruff = "^0.1.7"
pip-audit = "^2.7.2"
types-PyYAML = "^6.0.12.20250516"
pyright = "==1.1.402"

mutmut = "^2.5"
testcontainers = "^4.5"

questionary = "^2.0.1"
pip = ">=23.3"
setuptools = ">=78.1.1"
sqlalchemy = "^2.0.23"
vulture = "^2.14"
types-redis = {version = "==4.6.0.20241004", allow-prereleases = true, python = ">=3.8"}



# ---------------------------------------------------------------------------
# Static typing configuration (pyright) -------------------------------------
# ---------------------------------------------------------------------------

[tool.pyright]
# Only enforce strict typing on new app & CLI code until older packages are modernised.
# Packages listed in *exclude* are still type-checked in *basic* mode when imported
# elsewhere, but errors are silenced for their own source files.
typeCheckingMode = "basic"
exclude = [
  "src/ice_orchestrator",
]
reportMissingTypeStubs = false
reportUnknownMemberType = false

# ---------------------------------------------------------------------------
# Ruff â€“ Python linter configuration ---------------------------------------
# ---------------------------------------------------------------------------

[tool.ruff]
line-length = 88
# Target the same Python version used elsewhere
target-version = "py311"

# Suppress import-after-top-level rule across the repo until legacy modules are cleaned up.
[tool.ruff.lint]
ignore = ["E402"]
exclude = [
  "site",
  "htmlcov",
  "tests",
  "scripts",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["E402", "F401", "F841"]
"scripts/**/*" = ["E402"]
"alembic/env.py" = ["F821"]
