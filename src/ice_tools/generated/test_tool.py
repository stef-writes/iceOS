"""Test tool for factory pattern

Auto-generated by `ice new tool`.
"""

from __future__ import annotations

from typing import Any, Dict

from pydantic import Field, PositiveFloat

from ice_core.base_tool import ToolBase
from ice_core.models.enums import NodeType
from ice_core.unified_registry import registry


class TestTool(ToolBase):
    """Test tool for factory pattern"""

    # --- Metadata -------------------------------------------------------
    name: str = "test_tool"
    description: str = Field("Test tool for factory pattern")

    # --- Config ---------------------------------------------------------
    margin_percent: PositiveFloat = Field(25.0, description="Pricing margin percent")

    async def _execute_impl(self, *, cost: float) -> Dict[str, Any]:  # noqa: D401
        """Compute output based on *cost* and *margin_percent*."""
        price = cost * (1 + self.margin_percent / 100.0)
        return {"price": round(price, 2)}


# Factory function for creating TestTool instances
def create_test_tool_tool(**kwargs: Any) -> TestTool:
    """Create a TestTool with the specified configuration."""
    return TestTool(**kwargs)

# Auto-registration -----------------------------------------------------------
from ice_core.unified_registry import register_tool_factory

register_tool_factory("test_tool", "ice_tools.generated.test_tool:create_test_tool_tool")
