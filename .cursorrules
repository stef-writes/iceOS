# Cursor Rules for iceOS

1. Use type hints and Pydantic models in every new Node/Tool.

2. External side-effects live only inside Tool implementations.

3. Event names follow `source.eventVerb` (e.g. webhook.userCreated).

4. Never import from `app.*` inside `ice_sdk.*` (layer boundary).

5. Prefer async/await; long I/O must not block the event loop.

6. If you propose file edits, update matching tests in `tests/` and run `make test`. 

7. Mypy must pass in --strict mode on every commit.

9. Raise only typed, domain-specific exceptions; catch the narrowest subclass possible.

10. All public APIs must use Google-style docstrings with parameter types, return types, and one minimal code example.

11. All cross-layer calls go through stable service interfaces (services/*).

12. Direct imports across layers are forbidden.

13. Every Node/Tool exposes an idempotent validate() method; orchestration must call it before execution.

14. Deprecations use @deprecated(version, replacement) decorators and must log a structured warning at call-time.

15. All runtime dependencies must be pinned in pyproject.toml; CI must pass in staging before lockfile updates are merged.

16. Test coverage on new/changed lines must be â‰¥90%; CI will reject PRs below this threshold.

18. Avoid `importlib` or `__import__` in core layers unless inside a plugin registry. Dynamic imports must register with context manager.

## Test Implementation Rules

19. **Tests must validate the actual implementation, not assumptions**. When a test fails:
    - FIRST inspect the actual implementation to understand how it works
    - THEN fix the test to match the implementation
    - ONLY change core code if there's an actual bug in the implementation

20. **Before writing any test**, you MUST:
    - Read the actual class/function being tested
    - Check what fields, methods, and signatures actually exist
    - Use the exact same field names, types, and patterns as the implementation

21. **Test data must be realistic**. When creating test objects:
    - Use the actual Pydantic models to validate test data
    - Don't use mock field names that "seem reasonable" - use real ones
    - Import and instantiate actual classes to verify structure

22. **Implementation is the source of truth**:
    - If tests fail, assume the test is wrong until proven otherwise
    - Core models (LLMConfig, node configs, etc.) are battle-tested - don't change them
    - Read imports, field definitions, and method signatures from actual files

23. **When debugging test failures**:
    - Use `grep_search` to find actual field names and types
    - Use `read_file` to inspect model definitions
    - Check existing working code that uses these models as examples

